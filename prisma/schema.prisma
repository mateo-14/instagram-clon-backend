// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  displayName  String?
  bio          String?
  profileImage File?         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  imageId      Int?
  followedBy   User[]        @relation("UserFollows", references: [id])
  following    User[]        @relation("UserFollows", references: [id])
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  text      String
  images    File[]
  comments  Comment[]
  likes     PostLike[]
}

model Comment {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  author           User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         Int
  text             String
  post             Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId           Int
  replies          Comment[]     @relation("CommentToComment")
  commentReplied   Comment?      @relation("CommentToComment", fields: [commentRepliedId], references: [id], onDelete: Cascade)
  commentRepliedId Int?
  likes            CommentLike[]
}

model PostLike {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@id([userId, postId])
}

model CommentLike {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id([userId, commentId])
}

model File {
  id     Int    @id @default(autoincrement())
  key    String @unique
  url    String
  post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  user   User[]
}
